-- DarkMirror UI Library â€” Expanded Edition (600+ lines)
-- Mobile + PC friendly, smooth animations, scrollable areas, additional widgets:
-- KeybindPicker, ColorPicker, Notification, Popup, IconButton, Divider
-- API-compatible with original: CreateWindow -> CreateTab -> CreateSection -> CreateX

-- USAGE:
-- 1) Save this as a ModuleScript (e.g., ReplicatedStorage.DarkMirrorUI)
-- 2) In a LocalScript: local UI = require(ReplicatedStorage:WaitForChild("DarkMirrorUI")); local win = UI:CreateWindow("Title", "Subtitle", "v2.0")

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local playerGui = LocalPlayer:WaitForChild("PlayerGui")

local Library = {}
Library.__index = Library

-- =========================
-- Theme & Helpers
-- =========================
local THEME = {
    bg = Color3.fromRGB(18,18,18),
    panel = Color3.fromRGB(28,28,28),
    accent = Color3.fromRGB(230,60,60),
    accentDark = Color3.fromRGB(170,40,40),
    text = Color3.fromRGB(240,240,240),
    dim = Color3.fromRGB(170,170,170),
    shadow = "rbxassetid://1316045217"
}

-- convenience tween
local function tween(obj, props, time, style, dir)
    time = time or 0.18
    style = style or Enum.EasingStyle.Quad
    dir = dir or Enum.EasingDirection.Out
    local ok, _ = pcall(function()
        local ti = TweenInfo.new(time, style, dir)
        TweenService:Create(obj, ti, props):Play()
    end)
    return ok
end

local function createUICorner(parent, radius)
    local c = Instance.new("UICorner")
    c.CornerRadius = radius or UDim.new(0,8)
    c.Parent = parent
    return c
end
local function createUIStroke(parent, color, thickness)
    local s = Instance.new("UIStroke")
    s.Color = color or THEME.accent
    s.Thickness = thickness or 1
    s.Parent = parent
    return s
end
local function createShadow(parent)
    local img = Instance.new("ImageLabel")
    img.AnchorPoint = Vector2.new(0.5,0.5)
    img.Position = UDim2.new(0.5,0,0.5,4)
    img.Size = UDim2.new(1.06, 0, 1.08, 0)
    img.BackgroundTransparency = 1
    img.Image = THEME.shadow
    img.ImageTransparency = 0.75
    img.ZIndex = math.max((parent.ZIndex or 1) - 1, 0)
    img.Parent = parent
    return img
end

local function isPointInGui(point, gui)
    if not gui or not gui:IsA("GuiObject") then return false end
    local ap = gui.AbsolutePosition
    local asz = gui.AbsoluteSize
    return point.X >= ap.X and point.X <= (ap.X + asz.X) and point.Y >= ap.Y and point.Y <= (ap.Y + asz.Y)
end

local function attachActivated(gui, callback)
    if not gui or not callback then return end
    local last = 0
    local debounce = 0.22
    local function fire()
        local now = os.clock()
        if now - last < debounce then return end
        last = now
        pcall(callback)
    end
    if gui.Activated then gui.Activated:Connect(fire) end
    if gui:IsA("GuiButton") then gui.MouseButton1Click:Connect(fire) end
    -- fallback: touches starting on the object
    local conn
    conn = UserInputService.InputBegan:Connect(function(input, processed)
        if processed then return end
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
            local pos = input.Position or UserInputService:GetMouseLocation()
            if isPointInGui(pos, gui) then fire() end
        end
    end)
    gui.AncestryChanged:Connect(function(_, parent)
        if not parent and conn then conn:Disconnect() end
    end)
end

-- =========================
-- Root GUI creation - single ScreenGui
-- =========================
local rootGui = Instance.new("ScreenGui")
rootGui.Name = "DarkMirrorUI_Expanded"
rootGui.ResetOnSpawn = false
rootGui.Parent = playerGui

-- Floating show/hide button (draggable)
local floatBtn = Instance.new("ImageButton")
floatBtn.Size = UDim2.new(0,56,0,56)
floatBtn.Position = UDim2.new(0,22,0.5,-28)
floatBtn.AnchorPoint = Vector2.new(0,0.5)
floatBtn.BackgroundColor3 = THEME.panel
floatBtn.Image = ""
floatBtn.Parent = rootGui
createUICorner(floatBtn, UDim.new(0,12))
createShadow(floatBtn)
createUIStroke(floatBtn, Color3.fromRGB(40,40,40),1)

-- make draggable
do
    local dragging, dragInput, dragStart, startPos
    floatBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = floatBtn.Position
            dragInput = input
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false; dragInput = nil end
            end)
        end
    end)
    floatBtn.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            floatBtn.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- =========================
-- Library:CreateWindow
-- returns a Window object that can CreateTab
-- Window also exposes Notification and Popup functions
-- =========================
function Library:CreateWindow(guiName, subtitle, version)
    local Window = {}
    Window.__index = Window

    -- Base scrollable workspace for the window so the whole UI can scroll if bigger than screen
    local windowRoot = Instance.new("ScrollingFrame")
    windowRoot.Name = (guiName or "DarkMirrorWindow") .. "_Root"
    windowRoot.Size = UDim2.new(0, 740, 0, 480) -- default window size
    windowRoot.Position = UDim2.new(0.5, -370, 0.5, -240)
    windowRoot.AnchorPoint = Vector2.new(0.5,0.5)
    windowRoot.BackgroundTransparency = 1
    windowRoot.Parent = rootGui
    windowRoot.Active = true
    windowRoot.ScrollBarThickness = 8
    windowRoot.AutomaticCanvasSize = Enum.AutomaticSize.Y
    createUICorner(windowRoot, UDim.new(0, 12))

    -- Main frame inside root (visual container)
    local main = Instance.new("Frame")
    main.Size = UDim2.new(0, 740, 0, 480)
    main.BackgroundColor3 = THEME.bg
    main.BorderSizePixel = 0
    main.Parent = windowRoot
    createUICorner(main, UDim.new(0,12))
    createShadow(main)

    -- Titlebar
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 56)
    titleBar.BackgroundColor3 = THEME.panel
    titleBar.Parent = main
    createUICorner(titleBar, UDim.new(0,12))

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(0.6, -20, 1, 0)
    titleLabel.Position = UDim2.new(0, 12, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = guiName or "DarkMirror UI"
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 20
    titleLabel.TextColor3 = THEME.accent
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    local subtitleLabel = Instance.new("TextLabel")
    subtitleLabel.Size = UDim2.new(0.3, 0, 1, 0)
    subtitleLabel.Position = UDim2.new(0.6, 0, 0, 0)
    subtitleLabel.BackgroundTransparency = 1
    subtitleLabel.Text = subtitle and tostring(subtitle) or ""
    subtitleLabel.Font = Enum.Font.Gotham
    subtitleLabel.TextSize = 14
    subtitleLabel.TextColor3 = THEME.dim
    subtitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    subtitleLabel.Parent = titleBar

    local versionLabel = Instance.new("TextLabel")
    versionLabel.Size = UDim2.new(0.1, -12, 1, 0)
    versionLabel.Position = UDim2.new(0.9, 0, 0, 0)
    versionLabel.BackgroundTransparency = 1
    versionLabel.Text = version and tostring(version) or ""
    versionLabel.Font = Enum.Font.GothamBold
    versionLabel.TextSize = 12
    versionLabel.TextColor3 = THEME.dim
    versionLabel.TextXAlignment = Enum.TextXAlignment.Right
    versionLabel.Parent = titleBar

    -- Make window draggable via titleBar
    do
        local dragging, dragInput, dragStart, startPos
        titleBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = windowRoot.Position
                dragInput = input
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then dragging = false; dragInput = nil end
                end)
            end
        end)
        titleBar.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then dragInput = input end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                local delta = input.Position - dragStart
                windowRoot.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    end

    -- Sidebar (scrollable when tabs don't fit)
    local sidebar = Instance.new("ScrollingFrame")
    sidebar.Size = UDim2.new(0, 180, 1, -96)
    sidebar.Position = UDim2.new(0, 12, 0, 72)
    sidebar.BackgroundColor3 = THEME.panel
    sidebar.Parent = main
    sidebar.ScrollBarThickness = 8
    sidebar.AutomaticCanvasSize = Enum.AutomaticSize.Y
    sidebar.Active = true
    createUICorner(sidebar, UDim.new(0,10))

    local sideList = Instance.new("UIListLayout")
    sideList.Parent = sidebar
    sideList.Padding = UDim.new(0,10)
    sideList.SortOrder = Enum.SortOrder.LayoutOrder

    -- Content area (scrollable for many elements)
    local content = Instance.new("ScrollingFrame")
    content.Size = UDim2.new(1, -216, 1, -96)
    content.Position = UDim2.new(0, 204, 0, 72)
    content.BackgroundColor3 = THEME.bg
    content.Parent = main
    content.ScrollBarThickness = 12
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.Active = true
    createUICorner(content, UDim.new(0,10))

    local contentList = Instance.new("UIListLayout")
    contentList.Parent = content
    contentList.Padding = UDim.new(0,12)
    contentList.SortOrder = Enum.SortOrder.LayoutOrder

    -- For smooth scrolling, apply small tween when CanvasPosition changes (simple feel)
    do
        local debounce = false
        content.Changed:Connect(function(prop)
            if prop == "CanvasPosition" and not debounce then
                debounce = true
                local target = content.CanvasPosition
                tween(content, {CanvasPosition = target}, 0.14)
                task.delay(0.16, function() debounce = false end)
            end
        end)
        sidebar.Changed:Connect(function(prop)
            if prop == "CanvasPosition" then
                -- optional: could add sidebar scroll smoothing
            end
        end)
    end

    -- Tab management
    local tabFrames = {}
    local sidebarButtons = {}
    local activeTab

    function Window:CreateTab(tabName)
        local Tab = {}
        Tab.__index = Tab

        -- sidebar button
        local sb = Instance.new("TextButton")
        sb.Size = UDim2.new(1, -24, 0, 44)
        sb.Position = UDim2.new(0, 12, 0, 0)
        sb.BackgroundColor3 = THEME.panel
        sb.Text = tabName
        sb.Font = Enum.Font.GothamBold
        sb.TextSize = 16
        sb.TextColor3 = THEME.text
        sb.Parent = sidebar
        createUICorner(sb, UDim.new(0,8))
        createUIStroke(sb, Color3.fromRGB(40,40,40), 1)

        -- tab frame inside content
        local tabFrame = Instance.new("Frame")
        tabFrame.Size = UDim2.new(1, -24, 0, 0)
        tabFrame.Position = UDim2.new(0, 12, 0, 0)
        tabFrame.BackgroundTransparency = 1
        tabFrame.Parent = content
        tabFrame.ClipsDescendants = false

        local tabLayout = Instance.new("UIListLayout")
        tabLayout.Parent = tabFrame
        tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tabLayout.Padding = UDim.new(0,12)

        -- activation
        attachActivated(sb, function()
            if activeTab and activeTab ~= tabFrame then activeTab.Visible = false end
            tabFrame.Visible = true
            activeTab = tabFrame
            -- style
            for _, b in ipairs(sidebarButtons) do b.BackgroundColor3 = THEME.panel end
            sb.BackgroundColor3 = THEME.accentDark
            -- ensure sidebar scrolls to the selected button if necessary
            pcall(function()
                local y = sb.Position.Y.Offset - 10
                sidebar:TweenScrollTo(y)
            end)
        end)

        table.insert(sidebarButtons, sb)
        if #sidebarButtons == 1 then sb:Activate(); attachActivated(sb,function() end) end

        -- helpers to add rows
        local function createRow(labelText, element)
            local row = Instance.new("Frame")
            row.Size = UDim2.new(1, 0, 0, math.max((element.Size and element.Size.Y and element.Size.Y.Offset) or 40, 40))
            row.BackgroundTransparency = 1
            row.Parent = tabFrame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.46, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.Text = labelText
            label.Font = Enum.Font.GothamBold
            label.TextSize = 14
            label.TextColor3 = THEME.text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = row

            element.Parent = row
            local elW, elH = 0, 32
            if element.Size and element.Size.X and element.Size.Y then
                elW = element.Size.X.Offset; elH = element.Size.Y.Offset
            end
            element.Position = UDim2.new(1, -elW - 12, 0.5, -elH/2)
            return row
        end

        -- ========== Widgets ============
        function Tab:CreateSection(title)
            local sec = Instance.new("Frame")
            sec.Size = UDim2.new(1, 0, 0, 28)
            sec.BackgroundColor3 = THEME.bg
            sec.Parent = tabFrame
            createUICorner(sec, UDim.new(0,6))

            local t = Instance.new("TextLabel")
            t.Text = title
            t.Font = Enum.Font.GothamBold
            t.TextSize = 15
            t.TextColor3 = THEME.accent
            t.BackgroundTransparency = 1
            t.Position = UDim2.new(0, 8, 0, 4)
            t.Parent = sec
            return sec
        end

        function Tab:CreateToggle(name, callback)
            callback = callback or function() end
            local container = Instance.new("Frame")
            container.Size = UDim2.new(0, 80, 0, 34)
            container.BackgroundColor3 = THEME.panel
            container.Parent = tabFrame
            createUICorner(container, UDim.new(0,16))

            local track = Instance.new("Frame")
            track.Size = UDim2.new(1, -12, 0, 12)
            track.Position = UDim2.new(0, 6, 0.5, -6)
            track.BackgroundColor3 = Color3.fromRGB(68,68,68)
            track.Parent = container
            createUICorner(track, UDim.new(0,12))

            local thumb = Instance.new("Frame")
            thumb.Size = UDim2.new(0, 18, 0, 18)
            thumb.Position = UDim2.new(0, 4, 0.5, -9)
            thumb.BackgroundColor3 = THEME.text
            thumb.Parent = container
            createUICorner(thumb, UDim.new(0,9))

            local state = false
            attachActivated(container, function()
                state = not state
                if state then tween(track, {BackgroundColor3 = THEME.accent}, 0.14) end
                tween(thumb, {Position = state and UDim2.new(1, -22, 0.5, -9) or UDim2.new(0, 4, 0.5, -9)}, 0.14)
                pcall(callback, state)
            end)

            return container
        end

        function Tab:CreateSlider(name, min, max, default, callback)
            callback = callback or function() end
            min = min or 0; max = max or 100; default = default or min

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(0, 360, 0, 48)
            frame.BackgroundTransparency = 1
            frame.Parent = tabFrame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.6, 0, 0, 18)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.Text = name .. ": " .. tostring(default)
            label.TextColor3 = THEME.text
            label.TextSize = 14
            label.Parent = frame

            local track = Instance.new("Frame")
            track.Size = UDim2.new(1, -120, 0, 10)
            track.Position = UDim2.new(0, 8, 0, 26)
            track.BackgroundColor3 = Color3.fromRGB(65,65,65)
            track.Parent = frame
            createUICorner(track, UDim.new(0,6))

            local fill = Instance.new("Frame")
            fill.Size = UDim2.new(0, 0, 1, 0)
            fill.BackgroundColor3 = THEME.accent
            fill.Parent = track
            createUICorner(fill, UDim.new(0,6))

            local thumb = Instance.new("ImageLabel")
            thumb.Size = UDim2.new(0, 18, 0, 18)
            thumb.Position = UDim2.new(0, -9, 0.5, -9)
            thumb.AnchorPoint = Vector2.new(0,0)
            thumb.BackgroundTransparency = 1
            thumb.Image = "rbxassetid://9410022617" -- small circle image
            thumb.Parent = frame

            local valueLabel = Instance.new("TextLabel")
            valueLabel.Size = UDim2.new(0, 100, 0, 18)
            valueLabel.Position = UDim2.new(1, -104, 0, 14)
            valueLabel.BackgroundTransparency = 1
            valueLabel.Font = Enum.Font.GothamBold
            valueLabel.TextSize = 14
            valueLabel.TextColor3 = THEME.text
            valueLabel.Text = tostring(default)
            valueLabel.Parent = frame

            local draggingInput = nil
            local function setFromPx(px)
                local ap = track.AbsolutePosition.X
                local asz = track.AbsoluteSize.X
                if asz <= 0 then return end
                local rel = math.clamp((px - ap)/asz, 0, 1)
                fill.Size = UDim2.new(rel, 0, 1, 0)
                local target = UDim2.new(rel, -9, 0.5, -9)
                tween(thumb, {Position = target}, 0.06, Enum.EasingStyle.Linear)
                local val = math.floor(min + (max - min) * rel)
                valueLabel.Text = tostring(val)
                label.Text = name .. ": " .. tostring(val)
                pcall(callback, val)
            end

            local beganConn, changedConn, endedConn
            beganConn = UserInputService.InputBegan:Connect(function(input, processed)
                if processed then return end
                if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local pos = input.Position or UserInputService:GetMouseLocation()
                    if isPointInGui(pos, track) or isPointInGui(pos, thumb) then
                        draggingInput = input
                        setFromPx(pos.X)
                    end
                end
            end)
            changedConn = UserInputService.InputChanged:Connect(function(input)
                if draggingInput and input == draggingInput then
                    local pos = input.Position or UserInputService:GetMouseLocation()
                    setFromPx(pos.X)
                end
            end)
            endedConn = UserInputService.InputEnded:Connect(function(input)
                if draggingInput and input == draggingInput then draggingInput = nil end
            end)

            frame.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    if beganConn then beganConn:Disconnect() end
                    if changedConn then changedConn:Disconnect() end
                    if endedConn then endedConn:Disconnect() end
                end
            end)

            -- initialize
            task.spawn(function()
                local rel = 0
                if max ~= min then rel = (default - min) / (max - min) end
                fill.Size = UDim2.new(rel, 0, 1, 0)
                thumb.Position = UDim2.new(rel, -9, 0.5, -9)
                valueLabel.Text = tostring(default)
            end)

            return frame
        end

        function Tab:CreateDropdown(name, options, callback)
            callback = callback or function() end
            options = options or {}

            local container = Instance.new("Frame")
            container.Size = UDim2.new(0, 360, 0, 36)
            container.BackgroundColor3 = THEME.panel
            container.Parent = tabFrame
            createUICorner(container, UDim.new(0,8))

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.8, -12, 1, 0)
            label.Position = UDim2.new(0, 8, 0, 0)
            label.BackgroundTransparency = 1
            label.Text = name
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextColor3 = THEME.text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = container

            local arrow = Instance.new("ImageLabel")
            arrow.Size = UDim2.new(0, 18, 0, 18)
            arrow.Position = UDim2.new(1, -28, 0.5, -9)
            arrow.BackgroundTransparency = 1
            arrow.Image = "rbxassetid://3926305904"
            arrow.Rotation = 90
            arrow.Parent = container

            local list = Instance.new("Frame")
            list.Size = UDim2.new(1, 0, 0, 0)
            list.Position = UDim2.new(0, 0, 1, 8)
            list.BackgroundColor3 = Color3.fromRGB(22,22,22)
            list.ClipsDescendants = true
            list.Parent = container
            createUICorner(list, UDim.new(0,8))

            local layout = Instance.new("UIListLayout", list)
            layout.SortOrder = Enum.SortOrder.LayoutOrder
            layout.Padding = UDim.new(0,6)

            for i,opt in ipairs(options) do
                local b = Instance.new("TextButton")
                b.Size = UDim2.new(1, -12, 0, 28)
                b.Position = UDim2.new(0, 6, 0, 0)
                b.BackgroundTransparency = 1
                b.Font = Enum.Font.Gotham
                b.Text = opt
                b.TextColor3 = THEME.text
                b.TextSize = 14
                b.Parent = list
                attachActivated(b, function()
                    label.Text = tostring(opt)
                    tween(list, {Size = UDim2.new(1,0,0,0)}, 0.22)
                    tween(arrow, {Rotation = 90}, 0.22)
                    pcall(callback, opt)
                end)
            end

            attachActivated(container, function()
                local expanded = list.Size.Y.Offset > 0
                if expanded then
                    tween(list, {Size = UDim2.new(1,0,0,0)}, 0.22)
                    tween(arrow, {Rotation = 90}, 0.22)
                else
                    local target = math.min(#options * 34, 220)
                    tween(list, {Size = UDim2.new(1,0,0,target)}, 0.22)
                    tween(arrow, {Rotation = 270}, 0.22)
                end
            end)

            return container
        end

        function Tab:CreateTextbox(labelName, placeholder, callback)
            callback = callback or function() end

            local box = Instance.new("TextBox")
            box.Size = UDim2.new(0, 360, 0, 36)
            box.BackgroundColor3 = Color3.fromRGB(40,40,40)
            box.TextColor3 = THEME.text
            box.Font = Enum.Font.Gotham
            box.TextSize = 14
            box.PlaceholderText = placeholder or labelName or ""
            box.Parent = tabFrame
            createUICorner(box, UDim.new(0,8))

            local stroke = createUIStroke(box, THEME.accent, 2)
            stroke.Transparency = 1

            box.Focused:Connect(function()
                tween(stroke, {Transparency = 0}, 0.12)
                tween(box, {BackgroundColor3 = Color3.fromRGB(55,55,55)}, 0.12)
            end)
            box.FocusLost:Connect(function(enter)
                tween(stroke, {Transparency = 1}, 0.12)
                tween(box, {BackgroundColor3 = Color3.fromRGB(40,40,40)}, 0.12)
                if enter then pcall(callback, box.Text) end
            end)

            -- touch capture so keyboard appears in ScrollingFrame
            local beganConn
            beganConn = UserInputService.InputBegan:Connect(function(input, processed)
                if processed then return end
                if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local pos = input.Position or UserInputService:GetMouseLocation()
                    if isPointInGui(pos, box) then pcall(function() box:CaptureFocus() end) end
                end
            end)
            box.AncestryChanged:Connect(function(_, parent)
                if not parent and beganConn then beganConn:Disconnect() end
            end)

            return box
        end

        function Tab:CreateButton(name, callback)
            callback = callback or function() end
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(0, 160, 0, 36)
            btn.BackgroundColor3 = THEME.accent
            btn.Text = name
            btn.Font = Enum.Font.GothamBold
            btn.TextSize = 15
            btn.TextColor3 = THEME.text
            btn.Parent = tabFrame
            createUICorner(btn, UDim.new(0,10))
            createShadow(btn)

            attachActivated(btn, function()
                tween(btn, {BackgroundColor3 = THEME.accentDark}, 0.08)
                task.delay(0.09, function() tween(btn, {BackgroundColor3 = THEME.accent}, 0.12) end)
                pcall(callback)
            end)

            return btn
        end

        -- Advanced widget: KeybindPicker (returns selected KeyCode)
        function Tab:CreateKeybind(name, defaultKey, callback)
            callback = callback or function() end
            defaultKey = defaultKey or Enum.KeyCode.Unknown

            local container = Instance.new("Frame")
            container.Size = UDim2.new(0, 240, 0, 36)
            container.BackgroundColor3 = THEME.panel
            container.Parent = tabFrame
            createUICorner(container, UDim.new(0,8))

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.6, -8, 1, 0)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.Text = name
            label.TextColor3 = THEME.text
            label.Parent = container

            local keyBtn = Instance.new("TextButton")
            keyBtn.Size = UDim2.new(0.4, -8, 1, 0)
            keyBtn.Position = UDim2.new(0.6, 8, 0, 0)
            keyBtn.Text = tostring(defaultKey):gsub("Enum.KeyCode.", "")
            keyBtn.Parent = container
            keyBtn.Font = Enum.Font.GothamBold
            keyBtn.TextColor3 = THEME.text

            local waiting = false
            attachActivated(keyBtn, function()
                waiting = true
                keyBtn.Text = "Press a key..."
                local conn
                conn = UserInputService.InputBegan:Connect(function(input, processed)
                    if processed then return end
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        local kc = input.KeyCode
                        keyBtn.Text = tostring(kc):gsub("Enum.KeyCode.", "")
                        pcall(callback, kc)
                        waiting = false
                        conn:Disconnect()
                    end
                end)
            end)

            return container
        end

        -- Advanced widget: ColorPicker (returns Color3)
        function Tab:CreateColorPicker(name, defaultColor, callback)
            callback = callback or function() end
            defaultColor = defaultColor or Color3.fromRGB(255,0,0)

            local container = Instance.new("Frame")
            container.Size = UDim2.new(0, 280, 0, 44)
            container.BackgroundTransparency = 1
            container.Parent = tabFrame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.5, 0, 0, 18)
            label.BackgroundTransparency = 1
            label.Text = name
            label.Font = Enum.Font.Gotham
            label.TextColor3 = THEME.text
            label.TextSize = 14
            label.Parent = container

            local preview = Instance.new("Frame")
            preview.Size = UDim2.new(0, 36, 0, 36)
            preview.Position = UDim2.new(1, -44, 0, 0)
            preview.BackgroundColor3 = defaultColor
            preview.Parent = container
            createUICorner(preview, UDim.new(0,8))

            -- simple popup color grid
            attachActivated(preview, function()
                -- popup container
                local popup = Instance.new("Frame")
                popup.Size = UDim2.new(0, 220, 0, 140)
                popup.Position = UDim2.new(0.5, -110, 0.5, -70)
                popup.BackgroundColor3 = THEME.panel
                popup.Parent = rootGui
                createUICorner(popup, UDim.new(0,10))
                createShadow(popup)

                local colors = {
                    Color3.fromRGB(255,0,0), Color3.fromRGB(255,125,0), Color3.fromRGB(255,255,0), Color3.fromRGB(125,255,0),
                    Color3.fromRGB(0,255,0), Color3.fromRGB(0,255,125), Color3.fromRGB(0,255,255), Color3.fromRGB(0,125,255),
                    Color3.fromRGB(0,0,255), Color3.fromRGB(125,0,255), Color3.fromRGB(255,0,255), Color3.fromRGB(255,0,125)
                }
                local grid = Instance.new("UIGridLayout")
                grid.CellSize = UDim2.new(0, 48, 0, 40)
                grid.CellPadding = UDim2.new(0,8,0,8)
                grid.Parent = popup

                for _,c in ipairs(colors) do
                    local sw = Instance.new("TextButton")
                    sw.Size = UDim2.new(0,48,0,40)
                    sw.BackgroundColor3 = c
                    sw.AutoButtonColor = true
                    sw.Parent = popup
                    createUICorner(sw, UDim.new(0,6))
                    attachActivated(sw, function()
                        preview.BackgroundColor3 = c
                        pcall(callback, c)
                        popup:Destroy()
                    end)
                end

                -- close when clicking outside
                local conn
                conn = UserInputService.InputBegan:Connect(function(input, processed)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        local pos = input.Position or UserInputService:GetMouseLocation()
                        if not isPointInGui(pos, popup) then
                            popup:Destroy()
                            conn:Disconnect()
                        end
                    end
                end)
            end)

            return container
        end

        -- Notifications
        function Window:Notify(title, msg, duration)
            duration = duration or 4
            local notif = Instance.new("Frame")
            notif.Size = UDim2.new(0, 300, 0, 72)
            notif.Position = UDim2.new(1, -320, 0, 20)
            notif.BackgroundColor3 = THEME.panel
            notif.Parent = rootGui
            createUICorner(notif, UDim.new(0,8))
            createShadow(notif)

            local t = Instance.new("TextLabel")
            t.Text = title
            t.Font = Enum.Font.GothamBold
            t.TextSize = 16
            t.TextColor3 = THEME.accent
            t.BackgroundTransparency = 1
            t.Position = UDim2.new(0, 12, 0, 10)
            t.Parent = notif

            local m = Instance.new("TextLabel")
            m.Text = msg
            m.Font = Enum.Font.Gotham
            m.TextSize = 13
            m.TextColor3 = THEME.text
            m.BackgroundTransparency = 1
            m.Position = UDim2.new(0, 12, 0, 34)
            m.Size = UDim2.new(1, -24, 0, 28)
            m.Parent = notif

            tween(notif, {Position = UDim2.new(1, -320, 0, 20)}, 0.18)
            task.delay(duration, function()
                tween(notif, {Position = UDim2.new(1, 20, 0, 20)}, 0.2)
                task.delay(0.22, function() notif:Destroy() end)
            end)
        end

        -- Popup
        function Window:Popup(title, text, buttons)
            buttons = buttons or { {Text = "OK", Callback = function() end} }
            local popup = Instance.new("Frame")
            popup.Size = UDim2.new(0, 420, 0, 200)
            popup.Position = UDim2.new(0.5, -210, 0.5, -100)
            popup.BackgroundColor3 = THEME.panel
            popup.Parent = rootGui
            createUICorner(popup, UDim.new(0,10))
            createShadow(popup)

            local t = Instance.new("TextLabel")
            t.Text = title
            t.Font = Enum.Font.GothamBold
            t.TextSize = 18
            t.TextColor3 = THEME.accent
            t.BackgroundTransparency = 1
            t.Position = UDim2.new(0, 16, 0, 12)
            t.Parent = popup

            local m = Instance.new("TextLabel")
            m.Text = text
            m.Font = Enum.Font.Gotham
            m.TextSize = 14
            m.TextColor3 = THEME.text
            m.BackgroundTransparency = 1
            m.Position = UDim2.new(0, 16, 0, 46)
            m.Size = UDim2.new(1, -32, 0, 80)
            m.Parent = popup

            local btnContainer = Instance.new("Frame")
            btnContainer.Size = UDim2.new(1, -32, 0, 40)
            btnContainer.Position = UDim2.new(0, 16, 1, -56)
            btnContainer.BackgroundTransparency = 1
            btnContainer.Parent = popup

            local hb = Instance.new("UIListLayout")
            hb.FillDirection = Enum.FillDirection.Horizontal
            hb.Parent = btnContainer
            hb.SortOrder = Enum.SortOrder.LayoutOrder
            hb.HorizontalAlignment = Enum.HorizontalAlignment.Right
            hb.Padding = UDim.new(0,8)

            for i,binfo in ipairs(buttons) do
                local b = Instance.new("TextButton")
                b.Size = UDim2.new(0, 100, 1, 0)
                b.Text = binfo.Text or "Btn"
                b.Parent = btnContainer
                createUICorner(b, UDim.new(0,8))
                attachActivated(b, function()
                    if type(binfo.Callback) == "function" then pcall(binfo.Callback) end
                    popup:Destroy()
                end)
            end

            return popup
        end

        -- Divider
        function Tab:CreateDivider()
            local d = Instance.new("Frame")
            d.Size = UDim2.new(1, -24, 0, 2)
            d.BackgroundColor3 = Color3.fromRGB(40,40,40)
            d.Parent = tabFrame
            createUICorner(d, UDim.new(0,3))
            return d
        end

        -- Return Tab API
        return setmetatable({}, Tab)
    end

    -- Show/hide with float button
    attachActivated(floatBtn, function()
        windowRoot.Visible = not windowRoot.Visible
    end)

    -- Expose Notification & Popup on Window object
    Window.Notify = function(_, title, msg, dur) return Window.Notify and Window:Notify(title, msg, dur) end
    Window.Popup = function(_, title, text, buttons) return Window.Popup and Window:Popup(title, text, buttons) end

    return setmetatable({}, Window)
end

return Library
