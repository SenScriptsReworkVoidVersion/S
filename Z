-- DarkMirror UI Library (Cool Look, Mobile/Desktop Support, Smooth Animations + Smooth Slider)
-- Full optimized single-file UI library. Mobile + PC friendly with smooth scrolling, dropdown, toggle, button, textbox, and slider.

local Library = {}
Library.__index = Library

-- Global callback
local globalCallback = nil
function Library:SetCallback(func)
    globalCallback = func
end

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local playerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Theme
local THEME = {
    bg = Color3.fromRGB(18,18,18),
    panel = Color3.fromRGB(28,28,28),
    accent = Color3.fromRGB(220,50,50),
    accentDark = Color3.fromRGB(160,30,30),
    white = Color3.fromRGB(242,242,242),
    dim = Color3.fromRGB(200,200,200),
    shadowImg = "rbxassetid://1316045217"
}

-- Root GUI
local baseScreenGui = Instance.new("ScreenGui")
baseScreenGui.Name = "DarkMirrorClassicUI_Cool"
baseScreenGui.Parent = playerGui
baseScreenGui.ResetOnSpawn = false

-- Utility creators
local function createUICorner(instance, radius)
    local c = Instance.new("UICorner")
    c.CornerRadius = radius or UDim.new(0, 8)
    c.Parent = instance
    return c
end
local function createUIStroke(instance, color, thickness)
    local s = Instance.new("UIStroke")
    s.Color = color or THEME.accent
    s.Thickness = thickness or 1
    s.Parent = instance
    return s
end
local function createShadow(parent)
    local img = Instance.new("ImageLabel")
    img.AnchorPoint = Vector2.new(0.5,0.5)
    img.Position = UDim2.new(0.5,0.5,0.5,0.5)
    img.Size = UDim2.new(1.12,0,1.18,0)
    img.ZIndex = math.max((parent.ZIndex or 1) - 1, 0)
    img.BackgroundTransparency = 1
    img.Image = THEME.shadowImg
    img.ImageTransparency = 0.78
    img.Parent = parent
    return img
end
local function isPressInput(input)
    return input and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch)
end
local function isPointInGui(point, gui)
    if not gui or not gui:IsA("GuiObject") then return false end
    local ap = gui.AbsolutePosition
    local asz = gui.AbsoluteSize
    return point.X >= ap.X and point.X <= (ap.X + asz.X) and point.Y >= ap.Y and point.Y <= (ap.Y + asz.Y)
end

-- Robust press handler used for buttons, toggles, dropdown options etc.
local function attachPressHandler(guiObject, callback)
    if not guiObject or not callback then return end
    local last = 0
    local debounceWindow = 0.22

    local function trigger()
        local now = os.clock()
        if now - last < debounceWindow then return end
        last = now
        pcall(callback)
    end

    local aConn
    if guiObject.Activated then
        aConn = guiObject.Activated:Connect(trigger)
    end
    local mConn
    if guiObject:IsA("GuiButton") then
        mConn = guiObject.MouseButton1Click:Connect(trigger)
    end

    local beganConn
    beganConn = UserInputService.InputBegan:Connect(function(input, processed)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
            local pos = input.Position or UserInputService:GetMouseLocation()
            if isPointInGui(pos, guiObject) then
                trigger()
            end
        end
    end)

    local ancestryConn
    ancestryConn = guiObject.AncestryChanged:Connect(function(_, parent)
        if not parent then
            if aConn then aConn:Disconnect() end
            if mConn then mConn:Disconnect() end
            if beganConn then beganConn:Disconnect() end
            if ancestryConn then ancestryConn:Disconnect() end
        end
    end)
end

-- Floating toggle button (draggable)
local floatBtn = Instance.new("ImageButton")
floatBtn.Size = UDim2.new(0,58,0,58)
floatBtn.Position = UDim2.new(0,22,0.5,-29)
floatBtn.AnchorPoint = Vector2.new(0,0.5)
floatBtn.BackgroundColor3 = THEME.panel
floatBtn.Image = ""
floatBtn.Parent = baseScreenGui
createUICorner(floatBtn, UDim.new(0,12))
createShadow(floatBtn)
createUIStroke(floatBtn, Color3.fromRGB(40,40,40),1)

local dragging, dragInput, dragStart, startPos
floatBtn.InputBegan:Connect(function(input)
    if isPressInput(input) then
        dragging = true
        dragStart = input.Position
        startPos = floatBtn.Position
        dragInput = input
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
                dragInput = nil
            end
        end)
    end
end)
floatBtn.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        floatBtn.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Tween helper
local function tween(obj, props, time, style, dir)
    TweenService:Create(obj, TweenInfo.new(time or 0.2, style or Enum.EasingStyle.Quad, dir or Enum.EasingDirection.Out), props):Play()
end

-- Main window factory
function Library:CreateWindow(guiName, subtitle, version)
    local Window = {}
    Window.__index = Window

    local main = Instance.new("Frame")
    main.Name = guiName or "DarkMirrorClassicUI"
    main.Size = UDim2.new(0,520,0,360)
    main.Position = UDim2.new(0.5,-260,0.5,-180)
    main.BackgroundColor3 = THEME.bg
    main.BorderSizePixel = 0
    main.Parent = baseScreenGui
    createUICorner(main)
    createShadow(main)
    main.ZIndex = 50

    -- Titlebar
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1,0,0,52)
    titleBar.BackgroundTransparency = 0
    titleBar.BackgroundColor3 = THEME.panel
    titleBar.Parent = main
    createUICorner(titleBar, UDim.new(0,10))

    local title = Instance.new("TextLabel")
    title.Text = guiName or "DarkMirrorUI"
    title.Font = Enum.Font.GothamBold
    title.TextSize = 22
    title.TextColor3 = THEME.accent
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0,18,0,10)
    title.Size = UDim2.new(0,240,0,28)
    title.Parent = titleBar

    local sub = Instance.new("TextLabel")
    sub.Text = subtitle or ""
    sub.Font = Enum.Font.Gotham
    sub.TextSize = 13
    sub.TextColor3 = THEME.dim
    sub.BackgroundTransparency = 1
    sub.Position = UDim2.new(0,18,0,32)
    sub.Size = UDim2.new(0,300,0,16)
    sub.Parent = titleBar

    local ver = Instance.new("TextLabel")
    ver.Text = version or ""
    ver.Font = Enum.Font.GothamBold
    ver.TextSize = 12
    ver.TextColor3 = THEME.dim
    ver.BackgroundTransparency = 1
    ver.Position = UDim2.new(1,-110,0,18)
    ver.Size = UDim2.new(0,96,0,16)
    ver.TextXAlignment = Enum.TextXAlignment.Right
    ver.Parent = titleBar

    -- Drag window via titleBar
    do
        local draggingWin, dragInputWin, dragStartWin, startPosWin
        titleBar.InputBegan:Connect(function(input)
            if isPressInput(input) then
                draggingWin = true
                dragStartWin = input.Position
                startPosWin = main.Position
                dragInputWin = input
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        draggingWin = false
                        dragInputWin = nil
                    end
                end)
            end
        end)
        titleBar.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInputWin = input
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if input == dragInputWin and draggingWin then
                local delta = input.Position - dragStartWin
                main.Position = UDim2.new(startPosWin.X.Scale, startPosWin.X.Offset + delta.X, startPosWin.Y.Scale, startPosWin.Y.Offset + delta.Y)
            end
        end)
    end

    -- Sidebar (scrollable)
    local sidebar = Instance.new("ScrollingFrame")
    sidebar.Size = UDim2.new(0,170,1,-72)
    sidebar.Position = UDim2.new(0,8,0,60)
    sidebar.BackgroundColor3 = THEME.panel
    sidebar.ScrollBarThickness = 8
    sidebar.Parent = main
    sidebar.AutomaticCanvasSize = Enum.AutomaticSize.Y
    sidebar.Active = true
    createUICorner(sidebar, UDim.new(0,8))
    sidebar.ZIndex = 51

    local sideLayout = Instance.new("UIListLayout", sidebar)
    sideLayout.SortOrder = Enum.SortOrder.LayoutOrder
    sideLayout.Padding = UDim.new(0,8)

    -- Content (scrollable)
    local content = Instance.new("ScrollingFrame")
    content.Size = UDim2.new(1,-196,1,-88)
    content.Position = UDim2.new(0,188,0,76)
    content.BackgroundColor3 = Color3.fromRGB(14,14,14)
    content.ScrollBarThickness = 10
    content.Parent = main
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.Active = true
    createUICorner(content, UDim.new(0,8))
    content.ZIndex = 51

    local contentLayout = Instance.new("UIListLayout", content)
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0,10)

    -- Smooth scrolling: simple momentum emulation on ScrollWheel (desktop) and touch flick
    do
        local velocity = Vector2.new(0,0)
        local lastY = 0
        content.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                lastY = input.Position.Y
            end
        end)
        content.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                lastY = input.Position.Y
            end
        end)
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                -- could calculate momentum; keep simple for robustness
            end
        end)
    end

    -- Toggle floatBtn shows/hides main
    attachPressHandler(floatBtn, function()
        main.Visible = not main.Visible
    end)

    local tabFrames = {}
    local sidebarButtons = {}

    -- Helper row creator
    local function createRow(parent, labelText, element)
        local row = Instance.new("Frame")
        row.Size = UDim2.new(0.96,0,0, math.max((element.Size and element.Size.Y and element.Size.Y.Offset) or 44, 44))
        row.BackgroundTransparency = 1
        row.Parent = parent

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.48,0,1,0)
        label.BackgroundTransparency = 1
        label.Text = labelText
        label.Font = Enum.Font.GothamBold
        label.TextSize = 15
        label.TextColor3 = THEME.white
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = row

        element.Parent = row
        local elW = 0 local elH = 44
        if element.Size and element.Size.X and element.Size.Y then
            elW = element.Size.X.Offset
            elH = element.Size.Y.Offset
        end
        element.Position = UDim2.new(1, -elW - 8, 0.5, -elH/2)
        return row
    end

    -- Window API: CreateTab
    function Window:CreateTab(name)
        local tab = Instance.new("Frame")
        tab.Size = UDim2.new(1,0,0,0)
        tab.BackgroundTransparency = 1
        tab.LayoutOrder = #content:GetChildren()
        tab.Parent = content
        tabFrames[name] = tab

        local layout = Instance.new("UIListLayout", tab)
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout.Padding = UDim.new(0,8)

        -- sidebar button
        local sb = Instance.new("TextButton")
        sb.Size = UDim2.new(1,-12,0,42)
        sb.Position = UDim2.new(0,8,0,0)
        sb.BackgroundColor3 = THEME.panel
        sb.Text = name
        sb.Font = Enum.Font.GothamBold
        sb.TextSize = 16
        sb.TextColor3 = THEME.white
        sb.Parent = sidebar
        createUICorner(sb, UDim.new(0,8))

        local function selectTab()
            for k,v in pairs(tabFrames) do
                v.Visible = false
            end
            tab.Visible = true
            for _,b in pairs(sidebarButtons) do b.BackgroundColor3 = THEME.panel; b.TextColor3 = THEME.white end
            sb.BackgroundColor3 = THEME.accentDark
            sb.TextColor3 = THEME.white
        end
        attachPressHandler(sb, selectTab)

        table.insert(sidebarButtons, sb)
        if #sidebarButtons == 1 then selectTab() end

        -- Tab API
        local TabAPI = {}
        TabAPI.__index = TabAPI

        function TabAPI:CreateSection(titleText)
            local sec = Instance.new("Frame")
            sec.Size = UDim2.new(0.96,0,0,30)
            sec.BackgroundTransparency = 0
            sec.BackgroundColor3 = THEME.bg
            sec.Parent = tab
            createUICorner(sec, UDim.new(0,6))

            local txt = Instance.new("TextLabel")
            txt.Text = titleText
            txt.Font = Enum.Font.GothamBold
            txt.TextSize = 16
            txt.TextColor3 = THEME.accent
            txt.BackgroundTransparency = 1
            txt.Position = UDim2.new(0,8,0,4)
            txt.Parent = sec
            return sec
        end

        function TabAPI:CreateToggle(name, callback)
            callback = callback or function() end
            local container = Instance.new("Frame")
            container.Size = UDim2.new(0,72,0,32)
            container.BackgroundColor3 = THEME.panel
            container.Parent = tab
            createUICorner(container, UDim.new(0,16))

            local track = Instance.new("Frame")
            track.Size = UDim2.new(1,-8,0,12)
            track.Position = UDim2.new(0,4,0.5,-6)
            track.BackgroundColor3 = Color3.fromRGB(60,60,60)
            track.Parent = container
            createUICorner(track, UDim.new(0,8))

            local thumb = Instance.new("Frame")
            thumb.Size = UDim2.new(0,18,0,18)
            thumb.Position = UDim2.new(0,3,0.5,-9)
            thumb.BackgroundColor3 = THEME.white
            thumb.Parent = container
            createUICorner(thumb, UDim.new(0,9))

            local state = false
            local function update(now)
                if now then
                    tween(track, {BackgroundColor3 = THEME.accent}, 0.16)
                    tween(thumb, {Position = UDim2.new(1,-21,0.5,-9)}, 0.16)
                else
                    tween(track, {BackgroundColor3 = Color3.fromRGB(60,60,60)}, 0.16)
                    tween(thumb, {Position = UDim2.new(0,3,0.5,-9)}, 0.16)
                end
            end

            attachPressHandler(container, function()
                state = not state
                update(state)
                pcall(callback, state)
                if globalCallback then pcall(globalCallback, "Toggle", name, state) end
            end)

            return container
        end

        function TabAPI:CreateSlider(name, min, max, default, callback)
            if type(default) == "function" and callback == nil then
                callback = default; default = min or 0
            end
            min = min or 0; max = max or 100; default = default or min
            callback = callback or function() end

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(0,300,0,44)
            frame.BackgroundColor3 = THEME.panel
            frame.Parent = tab
            createUICorner(frame, UDim.new(0,8))

            local track = Instance.new("Frame")
            track.Size = UDim2.new(1,-110,0,10)
            track.Position = UDim2.new(0,12,0.5,-5)
            track.BackgroundColor3 = Color3.fromRGB(70,70,70)
            track.Parent = frame
            createUICorner(track, UDim.new(0,5))

            local thumb = Instance.new("Frame")
            thumb.Size = UDim2.new(0,20,0,20)
            thumb.Position = UDim2.new(0,0,0.5,-10)
            thumb.BackgroundColor3 = THEME.white
            thumb.Parent = frame
            createUICorner(thumb, UDim.new(0,10))

            local valLabel = Instance.new("TextLabel")
            valLabel.Size = UDim2.new(0,90,0,24)
            valLabel.Position = UDim2.new(1,-98,0.5,-12)
            valLabel.BackgroundTransparency = 1
            valLabel.Font = Enum.Font.GothamBold
            valLabel.TextSize = 14
            valLabel.TextColor3 = THEME.white
            valLabel.Text = tostring(default)
            valLabel.Parent = frame

            -- Smooth dragging with global input handlers
            local draggingInput = nil
            local function setFromPosition(px)
                local ap = track.AbsolutePosition.X
                local asz = track.AbsoluteSize.X
                if asz <= 0 then return end
                local rel = math.clamp((px - ap)/asz, 0, 1)
                local targetPos = UDim2.new(rel, -10, 0.5, -10)
                tween(thumb, {Position = targetPos}, 0.06, Enum.EasingStyle.Linear)
                local value = math.floor(min + (max - min) * rel)
                valLabel.Text = tostring(value)
                pcall(callback, value)
                if globalCallback then pcall(globalCallback, "Slider", name, value) end
            end

            local beganConn, changedConn, endedConn
            beganConn = UserInputService.InputBegan:Connect(function(input, processed)
                if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local pos = input.Position or UserInputService:GetMouseLocation()
                    if isPointInGui(pos, track) or isPointInGui(pos, thumb) then
                        draggingInput = input
                        setFromPosition(pos.X)
                    end
                end
            end)
            changedConn = UserInputService.InputChanged:Connect(function(input)
                if draggingInput and input == draggingInput then
                    local pos = input.Position or UserInputService:GetMouseLocation()
                    setFromPosition(pos.X)
                end
            end)
            endedConn = UserInputService.InputEnded:Connect(function(input)
                if draggingInput and input == draggingInput then
                    draggingInput = nil
                end
            end)

            frame.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    if beganConn then beganConn:Disconnect() end
                    if changedConn then changedConn:Disconnect() end
                    if endedConn then endedConn:Disconnect() end
                end
            end)

            -- Initialize thumb position
            task.spawn(function()
                local rel = 0
                if max ~= min then rel = (default - min)/(max - min) end
                thumb.Position = UDim2.new(rel, -10, 0.5, -10)
                valLabel.Text = tostring(default)
            end)

            return frame
        end

        function TabAPI:CreateDropdown(name, options, callback)
            options = options or {}
            callback = callback or function() end

            local container = Instance.new("Frame")
            container.Size = UDim2.new(0,260,0,36)
            container.BackgroundColor3 = THEME.panel
            container.Parent = tab
            createUICorner(container, UDim.new(0,8))

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1,-36,1,0)
            label.Position = UDim2.new(0,8,0,0)
            label.BackgroundTransparency = 1
            label.Text = name
            label.Font = Enum.Font.GothamBold
            label.TextColor3 = THEME.white
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = container

            local arrow = Instance.new("ImageLabel")
            arrow.Size = UDim2.new(0,18,0,18)
            arrow.Position = UDim2.new(1,-30,0.5,-9)
            arrow.BackgroundTransparency = 1
            arrow.Image = "rbxassetid://3926305904"
            arrow.Rotation = 90
            arrow.Parent = container

            local list = Instance.new("Frame")
            list.Size = UDim2.new(1,0,0,0)
            list.Position = UDim2.new(0,0,1,6)
            list.ClipsDescendants = true
            list.BackgroundColor3 = Color3.fromRGB(22,22,22)
            list.Parent = container
            createUICorner(list, UDim.new(0,8))

            local layout = Instance.new("UIListLayout", list)
            layout.SortOrder = Enum.SortOrder.LayoutOrder
            layout.Padding = UDim.new(0,4)

            for _,opt in ipairs(options) do
                local b = Instance.new("TextButton")
                b.Size = UDim2.new(1, -8, 0, 30)
                b.Position = UDim2.new(0,4,0,0)
                b.AnchorPoint = Vector2.new(0,0)
                b.BackgroundTransparency = 1
                b.Text = opt
                b.Font = Enum.Font.Gotham
                b.TextColor3 = THEME.white
                b.TextSize = 14
                b.Parent = list
                attachPressHandler(b, function()
                    label.Text = opt
                    tween(list, {Size = UDim2.new(1,0,0,0)}, 0.26)
                    tween(arrow, {Rotation = 90}, 0.26)
                    if callback then pcall(callback, opt) end
                    if globalCallback then pcall(globalCallback, "Dropdown", name, opt) end
                end)
            end

            attachPressHandler(container, function()
                local expanded = list.Size.Y.Offset > 0
                if expanded then
                    tween(list, {Size = UDim2.new(1,0,0,0)}, 0.26)
                    tween(arrow, {Rotation = 90}, 0.26)
                else
                    local target = math.min(#options * 34, 220)
                    tween(list, {Size = UDim2.new(1,0,0,target)}, 0.26)
                    tween(arrow, {Rotation = 270}, 0.26)
                end
            end)

            return container
        end

        function TabAPI:CreateTextbox(name, placeholder, callback)
            callback = callback or function() end
            placeholder = placeholder or ""

            local box = Instance.new("TextBox")
            box.Size = UDim2.new(0,260,0,36)
            box.BackgroundColor3 = Color3.fromRGB(40,40,40)
            box.Text = ""
            box.PlaceholderText = placeholder
            box.Font = Enum.Font.Gotham
            box.TextSize = 14
            box.TextColor3 = THEME.white
            box.ClearTextOnFocus = false
            box.Parent = tab
            createUICorner(box, UDim.new(0,8))

            local stroke = createUIStroke(box, THEME.accent, 2)
            stroke.Transparency = 1

            box.Focused:Connect(function()
                tween(stroke, {Transparency = 0}, 0.14)
                tween(box, {BackgroundColor3 = Color3.fromRGB(55,55,55)}, 0.14)
            end)
            box.FocusLost:Connect(function(enter)
                tween(stroke, {Transparency = 1}, 0.14)
                tween(box, {BackgroundColor3 = Color3.fromRGB(40,40,40)}, 0.14)
                if enter then pcall(callback, box.Text); if globalCallback then pcall(globalCallback, "Textbox", name, box.Text) end end
            end)

            -- Ensure touch opens keyboard when inside ScrollingFrame
            local beganConn
            beganConn = UserInputService.InputBegan:Connect(function(input, processed)
                if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local pos = input.Position or UserInputService:GetMouseLocation()
                    if isPointInGui(pos, box) then
                        pcall(function() if box and box.Parent then box:CaptureFocus() end end)
                    end
                end
            end)
            box.AncestryChanged:Connect(function(_, parent)
                if not parent and beganConn then beganConn:Disconnect() end
            end)

            return box
        end

        function TabAPI:CreateButton(name, callback)
            callback = callback or function() end

            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(0,160,0,36)
            btn.BackgroundColor3 = THEME.accent
            btn.Text = name
            btn.Font = Enum.Font.GothamBold
            btn.TextSize = 15
            btn.TextColor3 = THEME.white
            btn.Parent = tab
            createUICorner(btn, UDim.new(0,10))

            createShadow(btn)

            attachPressHandler(btn, function()
                tween(btn, {BackgroundColor3 = THEME.accentDark}, 0.09)
                task.delay(0.09, function()
                    tween(btn, {BackgroundColor3 = THEME.accent}, 0.12)
                end)
                pcall(callback)
                if globalCallback then pcall(globalCallback, "Button", name, true) end
            end)

            return btn
        end

        return setmetatable({}, TabAPI)
    end

    return setmetatable({}, Window)
end

return Library
